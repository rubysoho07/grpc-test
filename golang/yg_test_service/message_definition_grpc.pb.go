// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package message_definition

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// YGTestServiceClient is the client API for YGTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YGTestServiceClient interface {
	SayHello(ctx context.Context, in *YGRequest, opts ...grpc.CallOption) (*YGResponse, error)
}

type yGTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewYGTestServiceClient(cc grpc.ClientConnInterface) YGTestServiceClient {
	return &yGTestServiceClient{cc}
}

func (c *yGTestServiceClient) SayHello(ctx context.Context, in *YGRequest, opts ...grpc.CallOption) (*YGResponse, error) {
	out := new(YGResponse)
	err := c.cc.Invoke(ctx, "/YGTestService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YGTestServiceServer is the server API for YGTestService service.
// All implementations must embed UnimplementedYGTestServiceServer
// for forward compatibility
type YGTestServiceServer interface {
	SayHello(context.Context, *YGRequest) (*YGResponse, error)
	mustEmbedUnimplementedYGTestServiceServer()
}

// UnimplementedYGTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedYGTestServiceServer struct {
}

func (UnimplementedYGTestServiceServer) SayHello(context.Context, *YGRequest) (*YGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedYGTestServiceServer) mustEmbedUnimplementedYGTestServiceServer() {}

// UnsafeYGTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YGTestServiceServer will
// result in compilation errors.
type UnsafeYGTestServiceServer interface {
	mustEmbedUnimplementedYGTestServiceServer()
}

func RegisterYGTestServiceServer(s *grpc.Server, srv YGTestServiceServer) {
	s.RegisterService(&_YGTestService_serviceDesc, srv)
}

func _YGTestService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YGTestServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YGTestService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YGTestServiceServer).SayHello(ctx, req.(*YGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _YGTestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "YGTestService",
	HandlerType: (*YGTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _YGTestService_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message_definition.proto",
}
